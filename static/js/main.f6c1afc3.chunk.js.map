{"version":3,"sources":["components/HomePage/SearchResults/index.js","components/HomePage/index.js","components/Details/index.js","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchResults","props","history","useHistory","Restaurants","restaurantsList","map","item","key","Card","className","Img","variant","src","image_url","height","Body","style","Title","name","Text","location","address1","city","state","zip_code","rating","display_phone","Button","onClick","push","detailsObject","restaurantDetails","Container","Row","HomePage","useState","restaurant","setRestaurant","setLocation","setRestaurantsList","Col","xs","Form","Group","controlId","Label","Control","onChange","event","target","value","placeholder","axios","get","headers","Authorization","then","res","data","businesses","catch","err","console","log","length","GoogleApiWrapper","apiKey","useLocation","showingInfoWindow","setShowInfoWindow","activeMarker","setActiveMarker","setSelectedPlace","coords","latitude","longitude","onError","error","useEffect","geo","navigator","geolocation","watchPosition","getCurrentPosition","pos","id","categories","Cuisines","title","mapStyles2","width","position","alt","google","containerStyle","zoom","initialCenter","lat","coordinates","lng","marker","e","visible","onClose","lg","is_closed","price","href","url","time","formatedTime","toString","match","timeConvert","About","Media","type","Check","label","App","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6c1afc3.chunk.js","sourcesContent":["// The component that appears when you click 'Submit' on the main page.\n\nimport React, { } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Container, Row, Button, Card } from 'react-bootstrap';\nimport './style.css';\n\nconst SearchResults = (props) => {\n    let history = useHistory();\n    function restaurantDetails(item) {\n        history.push('/details', {\n            // Link to /details and pass in detailsObject/item as a prop\n            detailsObject: item\n        });\n    }\n\n    // Map function to loop through the array of items and displays a card for each restaurant\n    let Restaurants = props.restaurantsList.map((item, key) =>\n        <Card key={key} className=\"card-margin\">\n            <Card.Img variant=\"top\" src={item.image_url} height=\"250\" />\n            <Card.Body style={{ height: '240px' }}>\n                <Card.Title>{item.name}</Card.Title>\n                <Card.Text>\n                    Location: {item.location.address1}, {item.location.city}, {item.location.state} {item.location.zip_code}\n                </Card.Text>\n                <Card.Text>Rating: {item.rating} / 5</Card.Text>\n                <Card.Text>Phone: {item.display_phone}</Card.Text>\n                {/* TODO: Move button to same location */}                    \n            </Card.Body>\n            <Card.Body>\n            <Button onClick={\n                () => {\n                    restaurantDetails(item);\n                }} variant=\"primary\">More information</Button>\n            </Card.Body>\n            \n        </Card>\n    );\n\n    return (\n        <div>\n            <br />\n            <Container>\n                {/* Center row */}\n                <Row className=\"justify-content-md-center\">\n                    {/* The cards that will display the restaurant information */}\n                    {Restaurants}\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default SearchResults;","// The component for the home page.\n// TODO: Move SearchResults button to bottom, make GET to businesses/search, \n// add Google Maps, add HTML5 Geolocation\n\nimport React, { useState } from 'react';\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport SearchResults from './SearchResults';\n//import {FontAwesome, FontAwesomeIcon} from 'react-fontawesome';\nimport axios from 'axios';\n\nconst anywhere = 'https://cors-anywhere.herokuapp.com/';\n\n// Enter your own Yelp Fusion API key here\nconst API_KEY = 'yR15w8bu1wHsBvCaLBOTjSE19XdcT0rwnd9CUAkRENxiBHBqkfNj2sAkTx-yzkY4n146e_nXFAo43nQlwWSp3xxCHpoO8kzwBY_aE9OklcwvTEc3x3zEdUdP-epSXnYx';\n\n// Function for the homepage\nconst HomePage = (props) => {\n    // Define states\n    let [restaurant, setRestaurant] = useState(\"\");\n    let [location, setLocation] = useState(\"\");\n    let [restaurantsList, setRestaurantsList] = useState([]);\n    //let [restaurantsID, setRestaurantsID] = useState(\"\");\n\n    // Set the restaurant text in the restaurant state\n    const onChangeRestaurant = (event) => {\n        setRestaurant(event.target.value);\n    }\n\n    // Set the location text in the location state\n    const onChangeLocation = (event) => {\n        setLocation(event.target.value);\n    }\n\n    const searchRestaurant = (event) => {\n        // Send a GET request to the Yelp API and filter businesses to food\n        axios.get(`${anywhere}https://api.yelp.com/v3/businesses/search?term=${restaurant}&categories=food&location=${location}`, {\n            headers: {\n                Authorization: `Bearer ${API_KEY}`\n            }\n        }).then((res) => {\n            // Set business array in restaurantsList state\n            setRestaurantsList(res.data.businesses);\n        }).catch((err) => {\n            // Otherwise catch error and log it to console\n            console.log(\"Error occured: \", err);\n        })\n    }\n    return (\n        <div>\n            <Container>\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"6\">\n                        <h1>Restaurant-Searcher</h1>\n                        {/* Form for entering Restaurant Name and Location */}\n                        <Form>\n                            <Form.Group controlId=\"basic\">\n                                <Form.Label>Enter Restaurant</Form.Label>\n                                {/* When Form text changes, call onChangeRestaurant() */}\n                                <Form.Control onChange={onChangeRestaurant} placeholder=\"Restaurant\" />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"basic\">\n                                <Form.Label>Enter Location</Form.Label>\n                                {/* When Form text changes, call onChangeLocation() */}\n                                <Form.Control onChange={onChangeLocation} placeholder=\"Location (i.e. Atlanta, GA)\" />\n                            </Form.Group>\n                        </Form>\n                        \n                        {/* When button is pressed, call searchRestaurant() */}\n                        <Button variant=\"primary\" onClick={searchRestaurant}>Submit</Button>\n                    </Col>\n                </Row>\n\n                {/* If restaurantsList length > 0, show SearchResults component, otherwise don't show */}\n                { restaurantsList.length > -1 ? <SearchResults restaurantsList={restaurantsList} /> : null   }\n            </Container>\n        </div>\n    );\n}\n\nexport default HomePage;","// The component for when you click 'More information' on a specific restaurant.\n/*\nC:\\Users\\Pranav\\Documents\\Git\\restaurant-searcher>npm run deploy\nnpm ERR! code EJSONPARSE\nnpm ERR! file C:\\Users\\Pranav\\Documents\\Git\\restaurant-searcher\\package.json\nnpm ERR! JSON.parse Failed to parse json\nnpm ERR! JSON.parse Unexpected string in JSON at position 762 while parsing '{\nnpm ERR! JSON.parse   \"homepage\": \"https://foodie.github.i'\nnpm ERR! JSON.parse Failed to parse package.json data.\nnpm ERR! JSON.parse package.json must be actual JSON, not just JavaScript.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\Pranav\\AppData\\Roaming\\npm-cache\\_logs\\2020-03-04T04_10_21_668Z-debug.log\n*/\n// \n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Map, GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport { Container, Row, Button, Card, Col } from 'react-bootstrap';\nimport axios from 'axios';\nimport { FaBeer } from 'react-icons/fa';\n\n\nconst anywhere = 'https://cors-anywhere.herokuapp.com/';\n\n// Enter your own Yelp Fusion API key here\nconst API_KEY = 'yR15w8bu1wHsBvCaLBOTjSE19XdcT0rwnd9CUAkRENxiBHBqkfNj2sAkTx-yzkY4n146e_nXFAo43nQlwWSp3xxCHpoO8kzwBY_aE9OklcwvTEc3x3zEdUdP-epSXnYx';\n\nconst Details = (props) => {\n\n  // Create location object\n  let location = useLocation();\n  // Restaurant is the prop of location.state - contains the specific restaurant that was clicked on  \n  let [restaurant, setRestaurant] = useState(location.state.detailsObject);\n  let [showingInfoWindow, setShowInfoWindow] = useState(false); //Hides or the shows the infoWindow\n  let [activeMarker, setActiveMarker] = useState({}); //Shows the active marker upon click\n  let [selectedPlace, setSelectedPlace] = useState({}); //Shows the infoWindow to the selected place upon a marker\n  \n  const onChange = ({coords}) => {\n    console.log('Geolocation: ', coords.latitude, coords.longitude);\n  };\n  const onError = (error) => {\n    console.log('Geolocation: ', error);\n  };\n useEffect(() => {\n\n  const geo = navigator.geolocation;\n    if (!geo) {\n      console.log('Geolocation is not supported');\n      // return;\n    } else {\n      const watcher = geo.watchPosition(onChange, onError);\n      geo.getCurrentPosition((pos)=> {\n        console.log('Geolocation Current Position: ', pos.coords.latitude, pos.coords.longitude);\n      }, (err) => {\n        console.log('Geolocation Err: ', err);\n      })\n      // geo.clearWatch(watcher);\n    }\n\n    axios.get(`${anywhere}https://api.yelp.com/v3/businesses/${restaurant.id}`, {\n            headers: {\n                Authorization: `Bearer ${API_KEY}`\n            }\n        }).then((res) => {\n            // Set business array in restaurant state\n            console.log(\"Restaurant data: \", res.data);\n            setRestaurant(res.data);\n        }).catch((err) => {\n            // Otherwise catch error and log it to console\n            console.log(\"Error occured: \", err);\n        })\n  }, []);\n\n  console.log(\"Categories: \", restaurant.categories);\n  // Map function to loop through sub-array categories to find type of cuisines\n  let Cuisines = restaurant.categories.map((item, key) =>\n    <span key={key}>{item.title}, </span>\n  );\n\n  const onMarkerClick = (props, marker, e) => {\n      setSelectedPlace(props);\n      setActiveMarker(marker);\n      setShowInfoWindow(true);\n  }\n\n  const onClose = props => {\n    if (showingInfoWindow) {\n      setActiveMarker(null);\n      setShowInfoWindow(false);\n    }\n  };\n\n  const timeConvert = (time) => {\n    // Check correct time format and split into components\n    time = time.toString().match(/^([01]\\d|2[0-3])([0-5]\\d)/);\n    let formatedTime='';\n    if (time.length > 1) { // If time format correct\n      formatedTime = (time[1] % 12 || 12) + \":\" + time[2] + (time[1] < 12 ? ' AM' : ' PM')\n    }\n    return formatedTime; // return adjusted time or original string\n  }\n\n\n  let displayRating = () =>\n        <p>Tis is a test {timeConvert(\"0300\")}</p>\n    \n\n  const mapStyles2 = {\n    width: '100%',\n    height: \"400px\",\n    position: \"relative\"\n  };\n  return (\n    <div>\n      <Container>\n        {/* Restaurant Images */}\n        <Row className=\"justify-content-md-center\">\n          <img alt=\"restaurant\" src={restaurant.image_url} height=\"400\" width=\"700\" />\n        </Row>\n        <br />\n\n        {/* Restaurant Title */}\n        <Row className=\"justify-content-md-center\">\n          <h1>{restaurant.name}</h1>\n        </Row>\n\n        {/* Google Maps */}\n        <Row className=\"justify-content-md-center\">\n          <Map\n            google={props.google}\n            style={mapStyles2}\n            containerStyle={mapStyles2}\n            zoom={10}\n            initialCenter={{\n            lat: restaurant.coordinates.latitude,\n            lng: restaurant.coordinates.longitude\n            }}\n          >\n            <Marker\n              title={'The marker`s title will appear as a tooltip.'}\n              name={'SOMA'}\n              onClick={onMarkerClick}\n              position={{lat: restaurant.coordinates.latitude, lng: restaurant.coordinates.longitude}}\n            />\n            <InfoWindow\n              marker={activeMarker}\n              visible={showingInfoWindow}\n              onClose={onClose}\n            > \n            <h4>The Info Window</h4>\n            </InfoWindow>\n          </Map>\n        </Row>\n\n        {/* Cuisines */}\n        <Row className=\"justify-content-md-center\">\n        <p><FaBeer />Cuisines: {Cuisines}</p>\n        </Row>\n\n        {/* General Information */}\n        <Row className=\"justify-content-md-center\">\n        <Col xs lg=\"9\">\n          {/* Display Closed or Open depending on restaurant.is_closed */}\n        <p>{ restaurant.is_closed ? \"Closed\" : \"Open\"   }</p>\n        {/* Some restaurants don't have price value, so don't display if this is the case */}\n        <p>{ restaurant.price != null ? `Price: ${restaurant.price}` : null }</p>\n        <p>Rating: {restaurant.rating} / 5</p>\n        </Col>\n        \n        <Col>\n        <p>Address: {restaurant.location.address1}, {restaurant.location.city}, {restaurant.location.state} {restaurant.location.zip_code}</p>\n        <p>Phone number: {restaurant.display_phone}</p>\n        <a href={restaurant.url}>Yelp Link</a>\n        </Col>\n        </Row>\n\n        <Row>\n          <p>Open Hours:</p>\n          {displayRating()}\n          \n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBKkqON7yV0e9pLsxgZeoR8l917lbOEOrU'\n})(Details);","import React, {  } from 'react';\nimport { Container, Row, Col, Media, Form, Button } from 'react-bootstrap';\nimport './style.css';\n\nconst About = (props) => {\n    return (\n        <div>\n            <Container>\n                <Row>\n                    <Col>\n                        <Media>\n                            <img alt=\"logo\" className=\"img-margin\" src=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\" />\n                            <Media.Body>\n                                <h1>About Restaurant-Searcher</h1>\n                                <p>Description of me. This app finds restaurants using Google Maps and Yelp Fusion API. Github link: </p>\n                            </Media.Body>\n                        </Media>\n                    </Col>\n                </Row>\n\n                <Row className=\"justify-content-md-center\">\n                    <Col xs=\"6\">\n                        <Form>\n                            <Form.Group controlId=\"formBasicEmail\">\n                                <Form.Label>Email address</Form.Label>\n                                <Form.Control type=\"email\" placeholder=\"Enter email\" />\n                                <Form.Text className=\"text-muted\">\n                                    We'll never share your email with anyone else.\n                                </Form.Text>\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicPassword\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"formBasicCheckbox\">\n                                <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                            </Form.Group>\n\n                            <Button variant=\"primary\" type=\"submit\">\n                                Submit\n                    </Button>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from './components/HomePage';\nimport Details from './components/Details';\nimport About from './components/About';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n  // Define the path and what component to use at the path using routes\n    <Router>\n      <Switch>\n        <Route path=\"/details\">\n          <Details />\n        </Route>\n\n        <Route path=\"/about\">\n          <About />\n        </Route>\n\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n\n      </Switch>\n    </Router>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}